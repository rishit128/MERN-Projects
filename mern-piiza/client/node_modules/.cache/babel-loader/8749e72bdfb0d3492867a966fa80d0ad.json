{"ast":null,"code":"import axios from \"axios\";\nexport const getAllPizzas = () => async dispatch => {\n  dispatch({\n    type: 'GET_PIZZAS_REQUEST'\n  });\n\n  try {\n    const response = await axios.get('/api/pizzas/getallpizzas');\n    console.log(response);\n    dispatch({\n      type: 'GET_PIZZAS_SUCCESS',\n      payload: response.data\n    });\n  } catch (error) {\n    dispatch({\n      type: 'GET_PIZZAS_FAILED',\n      payload: error\n    });\n  }\n};\nexport const getPizzabyI = () => async dispatch => {\n  dispatch({\n    type: 'GET_PIZZAS_REQUEST'\n  });\n\n  try {\n    const response = await axios.get('/api/pizzas/getallpizzas');\n    console.log(response);\n    dispatch({\n      type: 'GET_PIZZAS_SUCCESS',\n      payload: response.data\n    });\n  } catch (error) {\n    dispatch({\n      type: 'GET_PIZZAS_FAILED',\n      payload: error\n    });\n  }\n};\nexport const filterPizzas = (searchkey, category) => async dispatch => {\n  var filteredPizzas;\n  dispatch({\n    type: 'GET_PIZZAS_REQUEST'\n  });\n\n  try {\n    const response = await axios.get('/api/pizzas/getallpizzas');\n    console.log(response.data);\n    filteredPizzas = response.data.filter(pizza => pizza.name.toLowerCase().includes(searchkey));\n\n    if (category != 'all') {\n      filteredPizzas = response.data.filter(pizza => pizza.category.toLowerCase() == category);\n    }\n\n    dispatch({\n      type: 'GET_PIZZAS_SUCCESS',\n      payload: filteredPizzas\n    });\n  } catch (error) {\n    dispatch({\n      type: 'GET_PIZZAS_FAILED',\n      payload: error\n    });\n  }\n};\nexport const addpizza = pizza => async dispatch => {\n  dispatch({\n    type: 'ADD_PIZZA_REQUEST'\n  });\n\n  try {\n    const response = await axios.post('/api/pizzas/addpizza', {\n      pizza\n    });\n    console.log(response);\n    dispatch({\n      type: 'ADD_PIZZA_SUCCESS'\n    });\n  } catch (error) {\n    dispatch({\n      type: 'ADD_PIZZA_FAILED',\n      payload: error\n    });\n  }\n};","map":{"version":3,"sources":["E:/React Projects/mern-piiza/client/src/actions/pizzaActions.js"],"names":["axios","getAllPizzas","dispatch","type","response","get","console","log","payload","data","error","getPizzabyI","filterPizzas","searchkey","category","filteredPizzas","filter","pizza","name","toLowerCase","includes","addpizza","post"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\n\r\n\r\n\r\nexport const getAllPizzas = () => async dispatch => {\r\n    dispatch({ type: 'GET_PIZZAS_REQUEST' })\r\n\r\n    try {\r\n        const response = await axios.get('/api/pizzas/getallpizzas')\r\n        console.log(response)\r\n        dispatch({ type: 'GET_PIZZAS_SUCCESS', payload: response.data })\r\n    } catch (error) {\r\n        dispatch({ type: 'GET_PIZZAS_FAILED', payload: error })\r\n\r\n    }\r\n}\r\nexport const getPizzabyI = () => async dispatch => {\r\n    dispatch({ type: 'GET_PIZZAS_REQUEST' })\r\n\r\n    try {\r\n        const response = await axios.get('/api/pizzas/getallpizzas')\r\n        console.log(response)\r\n        dispatch({ type: 'GET_PIZZAS_SUCCESS', payload: response.data })\r\n    } catch (error) {\r\n        dispatch({ type: 'GET_PIZZAS_FAILED', payload: error })\r\n\r\n    }\r\n}\r\nexport const filterPizzas = (searchkey, category) => async dispatch => {\r\n    var filteredPizzas;\r\n    dispatch({ type: 'GET_PIZZAS_REQUEST' })\r\n\r\n    try {\r\n        const response = await axios.get('/api/pizzas/getallpizzas')\r\n        console.log(response.data)\r\n        filteredPizzas = response.data.filter(pizza => pizza.name.toLowerCase().includes(searchkey))\r\n        if (category != 'all') {\r\n            filteredPizzas = response.data.filter(pizza => pizza.category.toLowerCase() == category)\r\n\r\n        }\r\n\r\n\r\n        dispatch({ type: 'GET_PIZZAS_SUCCESS', payload: filteredPizzas })\r\n    } catch (error) {\r\n        dispatch({ type: 'GET_PIZZAS_FAILED', payload: error })\r\n\r\n    }\r\n}\r\nexport const addpizza = (pizza) => async dispatch => {\r\n    dispatch({ type: 'ADD_PIZZA_REQUEST' })\r\n    try {\r\n        const response = await axios.post('/api/pizzas/addpizza', { pizza })\r\n        console.log(response);\r\n        dispatch({ type: 'ADD_PIZZA_SUCCESS' })\r\n    } catch (error) {\r\n        dispatch({ type: 'ADD_PIZZA_FAILED', payload: error })\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}